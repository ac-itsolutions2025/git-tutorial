AWSTemplateFormatVersion: "2010-09-09"
Description: A template to create a VPC with public and private subnets, route tables, internet gateway, NAT gateway, and EC2 instances.

Parameters:
  Environment:
    Type: String
    Description: Environment name
    Default: dev
  VpcCIDR:
    Type: String
    Description: VPC CIDR block
    Default: 10.100.0.0/16
  PublicSubnet1CIDR:
    Type: String
    Description: Public subnet 1 CIDR block
    Default: 10.100.1.0/24
  PublicSubnet2CIDR:
    Type: String
    Description: Public subnet 2 CIDR block
    Default: 10.100.2.0/24
  PrivateSubnet1CIDR:
    Type: String
    Description: Private subnet 1 CIDR block
    Default: 10.100.3.0/24
  PrivateSubnet2CIDR:
    Type: String
    Description: Private subnet 2 CIDR block
    Default: 10.100.4.0/24
  InstanceType:
    Type: String
    Description: EC2 instance type
    Default: t2.micro
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Key pair name for EC2 instance
  RestrictedIP:
    Type: String
    Description: Restricted IP for SSH access
    Default: 100.16.251.45/32

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub ${Environment}-VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub ${Environment}-PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub ${Environment}-PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          VpcCIDR:
            Type: String
            Description: VPC CIDR block
            Default: 10.100.0.0/16
          PublicSubnet1CIDR:
            Type: String
            Description: Public subnet 1 CIDR block
            Default: 10.100.1.0/24
          PublicSubnet2CIDR:
            Type: String
            Description: Public subnet 2 CIDR block
            Default: 10.100.2.0/24
          PrivateSubnet1CIDR:
            Type: String
            Description: Private subnet 1 CIDR block
            Default: 10.100.3.0/24
          PrivateSubnet2CIDR:
            Type: String
            Description: Private subnet 2 CIDR block
            Default: 10.100.4.0/24

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub ${Environment}-PrivateSubnet2

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub ${Environment}-IGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub ${Environment}-PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  NATGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATIP1.AllocationId
      SubnetId: !Ref PublicSubnet1
    DependsOn: AttachGateway

  NATIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATIP2.AllocationId
      SubnetId: !Ref PublicSubnet2
    DependsOn: AttachGateway

  NATIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub ${Environment}-PrivateRouteTable1

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub ${Environment}-PrivateRouteTable2

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound traffic on port 22 from restricted IP
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref RestrictedIP
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub ${Environment}-EC2SecurityGroup

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", "AMI"]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref EC2SecurityGroup
          SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub ${Environment}-EC2Instance

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0c94855ba95c71c99
    us-west-2:
      AMI: ami-0d6621c01e8c2de2c

Outputs:
  VPC:
    Description: The VPC
    Value: !Ref VPC
  PublicSubnet1:
    Description: The public subnet 1
    Value: !Ref PublicSubnet1
  PublicSubnet2:
    Description: The public subnet 2
    Value: !Ref PublicSubnet2
  PrivateSubnet1:
    Description: The private subnet 1
    Value: !Ref PrivateSubnet1
  PrivateSubnet2:
    Description: The private subnet 2
    Value: !Ref PrivateSubnet2
  EC2Instance:
    Description: The EC2 instance
    Value: !Ref EC2Instance
  PublicIP:
    Description: Public IP of the EC2 instance
    Value: !GetAtt EC2Instance.PublicIp
